
DIO_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008f2  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  64:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <makeOutput>:
#define setBit(port,pin) (port|=(1<<pin))
#define clearBit(port,pin) (port&= ~(1<<pin))
#define toggleBit(port,pin) (port^=(1<<pin))
#define readBit(port,pin) (port&(1<<pin))

void makeOutput( char* reg,unsigned char pin){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <makeOutput+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6b 83       	std	Y+3, r22	; 0x03
	setBit(*reg,pin);
  7e:	e9 81       	ldd	r30, Y+1	; 0x01
  80:	fa 81       	ldd	r31, Y+2	; 0x02
  82:	80 81       	ld	r24, Z
  84:	48 2f       	mov	r20, r24
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	28 2f       	mov	r18, r24
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 2e       	mov	r0, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <makeOutput+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <makeOutput+0x28>
  9c:	84 2b       	or	r24, r20
  9e:	e9 81       	ldd	r30, Y+1	; 0x01
  a0:	fa 81       	ldd	r31, Y+2	; 0x02
  a2:	80 83       	st	Z, r24
}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <makeInput>:

void makeInput( char* reg,unsigned char pin){
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	00 d0       	rcall	.+0      	; 0xb6 <makeInput+0x6>
  b6:	0f 92       	push	r0
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	6b 83       	std	Y+3, r22	; 0x03
	clearBit(*reg,pin);
  c2:	e9 81       	ldd	r30, Y+1	; 0x01
  c4:	fa 81       	ldd	r31, Y+2	; 0x02
  c6:	80 81       	ld	r24, Z
  c8:	48 2f       	mov	r20, r24
  ca:	8b 81       	ldd	r24, Y+3	; 0x03
  cc:	28 2f       	mov	r18, r24
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 2e       	mov	r0, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <makeInput+0x2c>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <makeInput+0x28>
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	e9 81       	ldd	r30, Y+1	; 0x01
  e6:	fa 81       	ldd	r31, Y+2	; 0x02
  e8:	80 83       	st	Z, r24
}
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <outputHigh>:
void outputHigh( char* reg,unsigned char pin){
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	00 d0       	rcall	.+0      	; 0xfc <outputHigh+0x6>
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6b 83       	std	Y+3, r22	; 0x03
	setBit(*reg,pin);
 108:	e9 81       	ldd	r30, Y+1	; 0x01
 10a:	fa 81       	ldd	r31, Y+2	; 0x02
 10c:	80 81       	ld	r24, Z
 10e:	48 2f       	mov	r20, r24
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <outputHigh+0x2c>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <outputHigh+0x28>
 126:	84 2b       	or	r24, r20
 128:	e9 81       	ldd	r30, Y+1	; 0x01
 12a:	fa 81       	ldd	r31, Y+2	; 0x02
 12c:	80 83       	st	Z, r24
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <outputLow>:
void outputLow( char* reg,unsigned char pin){
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	00 d0       	rcall	.+0      	; 0x140 <outputLow+0x6>
 140:	0f 92       	push	r0
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	6b 83       	std	Y+3, r22	; 0x03
	clearBit(*reg,pin);
 14c:	e9 81       	ldd	r30, Y+1	; 0x01
 14e:	fa 81       	ldd	r31, Y+2	; 0x02
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <outputLow+0x2c>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <outputLow+0x28>
 16a:	80 95       	com	r24
 16c:	84 23       	and	r24, r20
 16e:	e9 81       	ldd	r30, Y+1	; 0x01
 170:	fa 81       	ldd	r31, Y+2	; 0x02
 172:	80 83       	st	Z, r24
}
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <readInput>:

char readInput( char* reg, unsigned char pin){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <readInput+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <readInput+0x8>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6b 83       	std	Y+3, r22	; 0x03
	if (readBit(*reg,pin)>1){
 192:	e9 81       	ldd	r30, Y+1	; 0x01
 194:	fa 81       	ldd	r31, Y+2	; 0x02
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <readInput+0x2e>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <readInput+0x2a>
 1b2:	84 23       	and	r24, r20
 1b4:	95 23       	and	r25, r21
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	91 05       	cpc	r25, r1
 1ba:	1c f0       	brlt	.+6      	; 0x1c2 <readInput+0x42>
		return 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8c 83       	std	Y+4, r24	; 0x04
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <readInput+0x44>
	}
	else{
	return 0 ;
 1c2:	1c 82       	std	Y+4, r1	; 0x04
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	08 95       	ret

000001d4 <turnOnPullUP>:
void turnOnPullUP( char* reg,unsigned char pin){
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	00 d0       	rcall	.+0      	; 0x1da <turnOnPullUP+0x6>
 1da:	0f 92       	push	r0
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	6b 83       	std	Y+3, r22	; 0x03
	setBit(*reg,pin);
 1e6:	e9 81       	ldd	r30, Y+1	; 0x01
 1e8:	fa 81       	ldd	r31, Y+2	; 0x02
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <turnOnPullUP+0x2c>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <turnOnPullUP+0x28>
 204:	84 2b       	or	r24, r20
 206:	e9 81       	ldd	r30, Y+1	; 0x01
 208:	fa 81       	ldd	r31, Y+2	; 0x02
 20a:	80 83       	st	Z, r24
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	cf 91       	pop	r28
 214:	df 91       	pop	r29
 216:	08 95       	ret

00000218 <turnOffPullUP>:
void turnOffPullUP( char* reg,unsigned char pin){
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <turnOffPullUP+0x6>
 21e:	0f 92       	push	r0
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	6b 83       	std	Y+3, r22	; 0x03
	clearBit(*reg,pin);
 22a:	e9 81       	ldd	r30, Y+1	; 0x01
 22c:	fa 81       	ldd	r31, Y+2	; 0x02
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <turnOffPullUP+0x2c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <turnOffPullUP+0x28>
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	e9 81       	ldd	r30, Y+1	; 0x01
 24e:	fa 81       	ldd	r31, Y+2	; 0x02
 250:	80 83       	st	Z, r24
}
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	08 95       	ret

0000025e <main>:
 */

#include <stdlib.h>
#include <stdio.h>
#include "DIO_driver.h"
int main(){
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	makeInput(&myDDRB,0);
 266:	87 e3       	ldi	r24, 0x37	; 55
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	0e 94 58 00 	call	0xb0	; 0xb0 <makeInput>
	makeOutput(&myDDRB,1);
 270:	87 e3       	ldi	r24, 0x37	; 55
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	0e 94 36 00 	call	0x6c	; 0x6c <makeOutput>
	turnOnPullUP(&myPORTB,0);
 27a:	88 e3       	ldi	r24, 0x38	; 56
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <turnOnPullUP>

	while(1){

		if(readInput(&myPORTB,0)==0){
 284:	88 e3       	ldi	r24, 0x38	; 56
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	0e 94 c0 00 	call	0x180	; 0x180 <readInput>
 28e:	88 23       	and	r24, r24
 290:	31 f4       	brne	.+12     	; 0x29e <main+0x40>
			outputHigh(&myPORTB,1);
 292:	88 e3       	ldi	r24, 0x38	; 56
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	0e 94 7b 00 	call	0xf6	; 0xf6 <outputHigh>
 29c:	f3 cf       	rjmp	.-26     	; 0x284 <main+0x26>

		}
		else{
			outputLow(&myPORTB,1);
 29e:	88 e3       	ldi	r24, 0x38	; 56
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	0e 94 9d 00 	call	0x13a	; 0x13a <outputLow>
 2a8:	ed cf       	rjmp	.-38     	; 0x284 <main+0x26>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
